"""
Functions for exporting meshes.

Functions for exporting brain meshes to formats used by common 3D modeling software.
"""

import os
import sys


#ply
#format ascii 1.0
#comment Generated by Brainload
#element vertex 3
#property float x
#property float y
#property float z
#property uchar red
#property uchar green
#property uchar blue
#property uchar alpha
#element face 1
#property list uchar int vertex_indices
#end_header
#0.0 0.0 0.0 0 0 255 255
#100.0 0.0 0.0 0 0 255 255
#200.0 200.0 0.0 0 0 255 255
#3 0 1 2

def mesh_to_ply(vertex_coords, faces, vertex_colors=None):
    """
    Write a PLY format string of a mesh.

    Write a PLY format string of a mesh. See http://paulbourke.net/dataformats/ply/ for details on the format.
    """
    use_vertex_colors = vertex_colors is not None
    num_vertices = vertex_coords.shape[0]
    num_faces = faces.shape[0]
    hdr = ply_header(num_vertices, num_faces, use_vertex_colors=use_vertex_colors)
    verts_rep = ply_verts(vertex_coords, vertex_colors=vertex_colors)
    faces_rep = ply_faces(faces)
    return ''.join([hdr, verts_rep, faces_rep])


def ply_header(num_vertices, num_faces, use_vertex_colors=False):
    hdr_top = """ply
format ascii 1.0
comment Generated by Brainload
"""

    hdr_verts = """element vertex %d
property float x
property float y
property float z
""" % num_vertices

    hdr_vertex_colors = """property uchar red
property uchar green
property uchar blue
property uchar alpha
"""

    hdr_face = "element face %d\nproperty list uchar int vertex_indices\n" % num_faces
    hdr_end = "end_header\n"

    if use_vertex_colors:
        hdr_elements = [hdr_top, hdr_verts, hdr_vertex_colors, hdr_face, hdr_end]
    else:
        hdr_elements = [hdr_top, hdr_verts, hdr_face, hdr_end]
    return ''.join(hdr_elements)


def ply_verts(vertex_coords, vertex_colors=None):
    if vertex_coords.shape[0] == 0:
        return ''
    vert_reps = ["%f %f %f" % (v[0], v[1], v[2]) for v in vertex_coords]                      # x, y, z coords
    if vertex_colors is not None:
        col_reps = [" %d %d %d %d" % (c[0], c[1], c[2], c[3]) for c in vertex_colors]      # RGBA values of color
        vert_col_reps = [i+j for i,j in zip(vert_reps, col_reps)]
        return '\n'.join(vert_col_reps) + '\n'
    else:
        return '\n'.join(vert_reps) + '\n'


def ply_faces(faces):
    if faces.shape[0] == 0:
        return ''
    face_reps = ["3 %d %d %d" % (f[0], f[1], f[2]) for f in faces]                    # the 3 vertex indices defining the face
    return '\n'.join(face_reps) + '\n'
